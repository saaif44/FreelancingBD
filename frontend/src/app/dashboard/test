"use client";

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import RoleToggle from '../RoleToggle/page';
import Cookies from 'js-cookie';
import { useRouter } from 'next/navigation';

const Dashboard = () => {
  const [projects, setProjects] = useState([]);
  const [profileData, setProfileData] = useState(null);
  const [logouts, setLogouts] = useState(false);
  const [isNotValidUser, setNotValidUser] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [showJobForm, setShowJobForm] = useState(false);
  const [showServiceForm, setShowServiceForm] = useState(false);
  const [showBidForm, setShowBidForm] = useState(false);
  const [selectedProjectId, setSelectedProjectId] = useState(null);
  const [existingBid, setExistingBid] = useState(null);

  const authToken = Cookies.get('accessToken');
  const router = useRouter();

  const profileOptions = [
    {
      label: 'Profile',
      onClick: () => {
        window.location.href = '/profile';
      },
    },
    {
      label: 'Messages',
      onClick: () => {
        window.location.href = '/message';
      },
    },
    {
      label: 'Balance',
      onClick: () => {
        console.log('Balance clicked');
      },
    },
    {
      label: 'Logout',
      onClick: () => {
        handleLogout();
      },
    },
  ];

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  useEffect(() => {
    if (!authToken) {
      setNotValidUser(true);
      setTimeout(() => {
        setLogouts(true);
      }, 3000);
    }
  }, [authToken]);

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const response = await axios.get('http://localhost:4000/dashboard/', {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        });
        setProjects(response.data);
      } catch (error) {
        console.error('Error fetching projects:', error);
      }
    };
    fetchProjects();
  }, [authToken]);

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const response = await axios.get('http://localhost:4000/profile/user', {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        });
        setProfileData(response.data);
      } catch (error) {
        console.error('Error fetching user profile:', error);
      }
    };

    fetchUserProfile();
  }, [authToken]);

  if (logouts) {
    Cookies.remove('accessToken');
    router.push('/signin');
  }

  const handleLogout = async () => {
    try {
      setLogouts(true);
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  const handleBidButtonClick = async (projectId) => {
    try {
      const response = await axios.get(`http://localhost:4000/jobservice/bid/${projectId}`, {
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
      });
      setExistingBid(response.data);
      setSelectedProjectId(projectId);
      setShowBidForm(true);
    } catch (error) {
      console.error('Error fetching existing bid:', error);
    }
  };

  const handleFormSubmit = async (endpoint, data) => {
    try {
      await axios.post(`http://localhost:4000/${endpoint}`, data, {
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
      });
      alert(`${endpoint === 'jobservice/createjob' ? 'Job' : endpoint === 'jobservice/createservice' ? 'Service' : 'Bid'} created successfully!`);
      setShowJobForm(false);
      setShowServiceForm(false);
      setShowBidForm(false);
    } catch (error) {
      console.error(`Error creating ${endpoint}:`, error);
      if (error.response && error.response.data && error.response.data.message) {
        alert(error.response.data.message);
      } else {
        alert(`An error occurred while creating the ${endpoint === 'jobservice/createjob' ? 'job' : endpoint === 'jobservice/createservice' ? 'service' : 'bid'}.`);
      }
    }
  };

  const handleUpdateBid = async (bidId, data) => {
    try {
      await axios.put(`http://localhost:4000/jobservice/bids/${bidId}`, data, {
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
      });
      alert('Bid updated successfully!');
      setShowBidForm(false);
    } catch (error) {
      console.error('Error updating bid:', error);
      if (error.response && error.response.data && error.response.data.message) {
        alert(error.response.data.message);
      } else {
        alert('An error occurred while updating the bid.');
      }
    }
  };

  return (
    <div className="Role-container">
      <nav className="navbar">
        <div className="navbar-left">
          <RoleToggle />
          {profileData && (
            <p style={{ marginLeft: '10px', color: 'lightgray', fontFamily: 'arial', fontSize: '11' }}>
              {profileData.role}
            </p>
          )}
        </div>

        <div className="navbar-right">
          <div className="dropdown">
            <button className="dropdown-toggle" onClick={toggleDropdown}>
              {profileData && profileData.username ? profileData.username : 'Menu'}
            </button>
            {isOpen && (
              <div className="dropdown-menu">
                <ul>
                  {profileOptions.map((option, index) => (
                    <li key={index} onClick={option.onClick}>
                      {option.label === 'Balance' ? (
                        <span> Balance ${profileData && profileData.balance} </span>
                      ) : (
                        option.label
                      )}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      </nav>

      {isNotValidUser && (
        <h1
          style={{
            position: 'fixed',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: '70%',
            maxWidth: '500px',
            backgroundColor: 'red',
            color: 'white',
            padding: '20px',
            borderRadius: '10px',
            textAlign: 'center',
            zIndex: '9999',
          }}
        >
          You are not logged in. Please log in to access your dashboard.
        </h1>
      )}

      <div className="dashboard-container">
        <h2>Dashboard</h2>
        <div className="action-buttons">
          {profileData && profileData.role === 'FREELANCER' ? (
            <button className="create-button" onClick={() => setShowServiceForm(true)}>
              Create Service
            </button>
          ) : (
            <button className="create-button" onClick={() => setShowJobForm(true)}>
              Create Job
            </button>
          )}
        </div>
        <div className="projects-list">
          {projects.map((project) => (
            <div className="project-card" key={project.id}>
              <h3>{project.title}</h3>
              <p>{project.description}</p>
              {profileData && profileData.role === 'CLIENT' ? (
                <>
                  <p>Standard Offer: ${project.standard_offer}</p>
                  <p>Budget Offer: ${project.premium_offer}</p>
                  <p>Premium Offer: ${project.butter_offer}</p>
                </>
              ) : (
                <>
                  <p className="budget">Budget: ${project.budget}</p>
                  <p className="deadline">Deadline: {new Date(project.deadline).toDateString()}</p>
                  <p className={`status ${project.is_job_completed ? 'completed' : 'pending'}`}>
                    {project.is_job_completed ? 'Completed' : 'Pending'}
                  </p>
                  <p className={`status ${project.is_payment_verified ? 'verified' : 'pending'}`}>
                    {project.is_payment_verified ? 'Payment Verified' : 'Payment Pending'}
                  </p>
                </>
              )}
              {profileData && profileData.role === 'FREELANCER' && (
                <button
                  onClick={() => handleBidButtonClick(project.id)}
                  className="bid-button"
                >
                  {existingBid ? 'Update Bid' : 'Bid'}
                </button>
              )}
            </div>
          ))}
        </div>

        {showJobForm && (
          <form
            onSubmit={(e) => {
              e.preventDefault();
              const data = new FormData(e.target);
              handleFormSubmit('jobservice/createjob', {
                title: data.get('title'),
                description: data.get('description'),
                budget: parseFloat(data.get('budget')),
                deadline: data.get('deadline'),
              });
            }}
          >
            <h3>Create Job</h3>
            <label>
              Title:
              <input type="text" name="title" required />
            </label>
            <label>
              Description:
              <textarea name="description" required />
            </label>
            <label>
              Budget:
              <input type="number" name="budget" step="0.01" required />
            </label>
            <label>
              Deadline:
              <input type="date" name="deadline" required />
            </label>
            <button type="submit">Create Job</button>
            <button type="button" onClick={() => setShowJobForm(false)}>
              Cancel
            </button>
          </form>
        )}

        {showServiceForm && (
          <form
            onSubmit={(e) => {
              e.preventDefault();
              const data = new FormData(e.target);
              handleFormSubmit('jobservice/createservice', {
                title: data.get('title'),
                description: data.get('description'),
                standard_offer: parseInt(data.get('standard_offer')),
                premium_offer: parseInt(data.get('premium_offer')),
                butter_offer: parseInt(data.get('butter_offer')),
              });
            }}
          >
            <h3>Create Service</h3>
            <label>
              Title:
              <input type="text" name="title" required />
            </label>
            <label>
              Description:
              <textarea name="description" required />
            </label>
            <label>
              Standard Offer:
              <input type="number" name="standard_offer" required />
            </label>
            <label>
              Premium Offer:
              <input type="number" name="premium_offer" required />
            </label>
            <label>
              Butter Offer:
              <input type="number" name="butter_offer" required />
            </label>
            <button type="submit">Create Service</button>
            <button type="button" onClick={() => setShowServiceForm(false)}>
              Cancel
            </button>
          </form>
        )}

        {showBidForm && (
          <form
            onSubmit={(e) => {
              e.preventDefault();
              const data = new FormData(e.target);
              const bidData = {
                description: data.get('description'),
                offer_rate: parseFloat(data.get('offer_rate')),
                offer_time: parseInt(data.get('offer_time')),
                projectId: selectedProjectId,
              };
              if (existingBid) {
                handleUpdateBid(existingBid.id, bidData);
              } else {
                handleFormSubmit('jobservice/createbid', bidData);
              }
            }}
          >
            <h3>{existingBid ? 'Update Bid' : 'Create Bid'}</h3>
            <label>
              Description:
              <textarea name="description" defaultValue={existingBid?.description || ''} required />
            </label>
            <label>
              Offer Rate:
              <input type="number" name="offer_rate" step="0.01" defaultValue={existingBid?.offer_rate || ''} required />
            </label>
            <label>
              Offer Time (in hours):
              <input type="number" name="offer_time" defaultValue={existingBid?.offer_time || ''} required />
            </label>
            <button type="submit">{existingBid ? 'Update Bid' : 'Create Bid'}</button>
            <button type="button" onClick={() => setShowBidForm(false)}>
              Cancel
            </button>
          </form>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
